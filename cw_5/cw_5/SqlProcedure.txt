USE [s16578]
GO
/****** Object:  StoredProcedure [dbo].[PromoteStudents]    Script Date: 07.05.2020 23:05:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[PromoteStudents] @Studies NVARCHAR(20), @Semester INT
AS
BEGIN
	BEGIN TRANSACTION
	BEGIN TRY
		DECLARE @OldIdEnrollment INT
		DECLARE @NewIdEnrollment INT

		IF NOT EXISTS(SELECT * FROM Studies WHERE Name = @Studies)
		BEGIN 
			RAISERROR('Studies does not exist',11,1)
		END

		DECLARE @IdStudy INT = (SELECT IdStudy FROM Studies WHERE Name = @Studies);
		SELECT @OldIdEnrollment = IdEnrollment FROM Enrollment WHERE Semester = @Semester AND IdStudy = @IdStudy
		SELECT @NewIdEnrollment = IdEnrollment FROM Enrollment WHERE IdStudy = @IdStudy AND Semester = (@Semester+1)
		SELECT @Semester, @Studies, @OldIdEnrollment, @NewIdEnrollment, @IdStudy
		
		IF(@NewIdEnrollment IS NOT NULL AND @OldIdEnrollment IS NOT NULL)
		BEGIN	
			UPDATE Student SET IdEnrollment = @NewIdEnrollment WHERE IdEnrollment = @OldIdEnrollment
			SELECT IdEnrollment, Semester, IdStudy, StartDate FROM Enrollment WHERE IdEnrollment = @NewIdEnrollment
		END

		IF (@NewIdEnrollment IS NULL AND @OldIdEnrollment IS NOT NULL)
		BEGIN
			SELECT @NewIdEnrollment = (SELECT MAX(IdEnrollment)+1 FROM Enrollment)
			INSERT INTO Enrollment (IdEnrollment, Semester, IdStudy, StartDate)
			VALUES (@NewIdEnrollment, (@Semester+1), @IdStudy, CURRENT_TIMESTAMP)	
			UPDATE Student SET IdEnrollment = @NewIdEnrollment WHERE IdEnrollment = @OldIdEnrollment
			SELECT IdEnrollment, Semester, IdStudy, StartDate FROM Enrollment WHERE IdEnrollment = @NewIdEnrollment
		END

		IF @OldIdEnrollment IS NULL
		BEGIN
			SELECT @OldIdEnrollment = (SELECT MAX(IdEnrollment)+1 FROM Enrollment)
			INSERT INTO Enrollment (IdEnrollment, Semester, IdStudy, StartDate)
			VALUES (@OldIdEnrollment, @Semester, @IdStudy, CURRENT_TIMESTAMP)
			SELECT IdEnrollment, Semester, IdStudy, StartDate FROM Enrollment WHERE IdEnrollment = @OldIdEnrollment
		END

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE() AS ErrorMessage
		ROLLBACK TRANSACTION;
	END CATCH
END